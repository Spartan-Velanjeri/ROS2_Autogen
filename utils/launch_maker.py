# Requirements for a Launch file

import os

'''
Name of Package
Path to URDF
Simulator used
Additional Nodes (Available ones or Custom like controllers)
'''

# questions = {}
# questions['package_name'] = 'Package Name : '
# questions['urdf_path'] = "Path to the URDF: "
# questions['simulator_used'] = "Simulator of Choice: "

# questions['nodes'] = "Nodes of Choice:"
# checker = 1



def sim_checker():
    # Checks if you have Gazebo classic or the Ignition Gazebo or Both
    pass

def library_gen():
    library_stuff = f"""
import os
from ament_index_python.packages import get_package_share_directory
from launch import LaunchDescription
from launch.substitutions import LaunchConfiguration, PathJoinSubstitution
from launch_ros.actions import Node
from launch_ros.substitutions import FindPackageShare
from launch.actions import IncludeLaunchDescription
from launch.launch_description_sources import PythonLaunchDescriptionSource
import xacro
    """
    return library_stuff

def robot_node_gen(urdf_path,package_name):
    file_name = os.path.basename(urdf_path)
    robot_node_stuff = f"""
    robot_path = os.path.join(get_package_share_directory('{package_name}'))
    xacro_file = os.path.join(robot_path, 'urdf', '{file_name}')
    doc = xacro.parse(open(xacro_file))
    xacro.process_doc(doc)
    params = {{'robot_description': doc.toxml(), 'use_sim_time': use_sim_time}}

    node_robot_state_publisher = Node(
        package='robot_state_publisher',
        executable='robot_state_publisher',
        output='screen',
        parameters=[params],
    )

    gz_spawn_entity = Node(
        package='ros_gz_sim',
        executable='create',
        output='screen',
        arguments=['-string', doc.toxml(),
                    '-name', '{package_name}',
                    '-allow_renaming', 'true'],
    )
"""
    return robot_node_stuff
    
def gazebo_node_gen(sim_name):
    if sim_name == 'ignition_gazebo':
        gazebo_stuff = f"""
    gz_args = LaunchConfiguration('gz_args',default=' -r -v 4 empty.sdf')
    use_sim_time = LaunchConfiguration('use_sim_time',default=True)
        """
    bridge_stuff = f"""
    bridge = Node(
        package='ros_gz_bridge',
        executable='parameter_bridge',
        arguments=['/clock@rosgraph_msgs/msg/Clock[ignition.msgs.Clock'],
    )
    """

    return gazebo_stuff,bridge_stuff

def rviz_node(package_name): # Currently displays an empty rviz window for you to add the RobotModel
    #
    rviz_stuff = f"""
    rviz_config_file = os.path.join(robot_path,'rviz','default.rviz')

    rviz_node = Node(
        package='rviz2',
        executable='rviz2',
        name='rviz2',
        output = 'screen',
        arguments=['-d',rviz_config_file]
    )
    """
    return rviz_stuff
    
def create_launch_file(file_content,file_name):
    with open(file_name,'w') as file:
        file.write("# ***** LAUNCH FILE GENERATED BY AUTOMATON*****")
        file.write("\n")
        file.write(file_content)

def finisher():
    finisher = f"""
    return LaunchDescription([
        bridge,
        # Launch gazebo environment
        IncludeLaunchDescription(
            PythonLaunchDescriptionSource(
                [os.path.join(get_package_share_directory('ros_gz_sim'),
                            'launch', 'gz_sim.launch.py')]),
            launch_arguments=[('gz_args', [' -r -v 4 empty.sdf'])]),
        node_robot_state_publisher,
        gz_spawn_entity,
        rviz_node,
    ])
    """
    return finisher

def launch_generator(package_name,urdf_path,sim_name):

    robot_node_stuff = robot_node_gen(urdf_path,package_name)
    gazebo_stuff,bridge_stuff = gazebo_node_gen(sim_name)
    library_stuff = library_gen()
    finisher_stuff = finisher()
    rviz_stuff = rviz_node(package_name)

    final = f"""
{library_stuff}
def generate_launch_description():
    {gazebo_stuff}
    {robot_node_stuff}
    {bridge_stuff}
    {rviz_stuff}
    {finisher_stuff}
    """

    #Let's create a launch file here
    create_launch_file(final,f"{package_name}.launch.py")


if __name__ == "__main__":
    urdf_path = input("Give the path of the URDF")
    package_name = input("What would you like the package name to be? ")
    launch_generator(package_name,urdf_path,'ignition_gazebo')  
